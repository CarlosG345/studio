// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized coffee recommendations based on user's order history and loyalty points.
 *
 * - coffeeChatbotRecommendations - A function that returns coffee recommendations.
 * - CoffeeChatbotRecommendationsInput - The input type for the coffeeChatbotRecommendations function.
 * - CoffeeChatbotRecommendationsOutput - The return type for the coffeeChatbotRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CoffeeChatbotRecommendationsInputSchema = z.object({
  orderHistory: z.string().describe('The user order history.'),
  loyaltyPoints: z.number().describe('The number of loyalty points the user has.'),
  query: z.string().describe('The user query.'),
});
export type CoffeeChatbotRecommendationsInput = z.infer<typeof CoffeeChatbotRecommendationsInputSchema>;

const CoffeeChatbotRecommendationsOutputSchema = z.object({
  recommendation: z.string().describe('The personalized coffee recommendation.'),
});
export type CoffeeChatbotRecommendationsOutput = z.infer<typeof CoffeeChatbotRecommendationsOutputSchema>;

const shouldConsiderHistoryTool = ai.defineTool({
  name: 'shouldConsiderHistory',
  description: 'Decide whether to incorporate user order history and loyalty points into the response.',
  inputSchema: z.object({
    query: z.string().describe('The user query.'),
    orderHistory: z.string().describe('The user order history.'),
    loyaltyPoints: z.number().describe('The number of loyalty points the user has.'),
  }),
  outputSchema: z.boolean().describe('True if order history and loyalty points should be considered, false otherwise.'),
},
async (input) => {
  // Basic logic to decide whether to consider history; refine as needed
  return input.orderHistory !== '' || input.loyaltyPoints > 0;
});

export async function coffeeChatbotRecommendations(input: CoffeeChatbotRecommendationsInput): Promise<CoffeeChatbotRecommendationsOutput> {
  return coffeeChatbotRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'coffeeChatbotRecommendationsPrompt',
  input: {
    schema: CoffeeChatbotRecommendationsInputSchema,
  },
  output: {
    schema: CoffeeChatbotRecommendationsOutputSchema,
  },
  tools: [shouldConsiderHistoryTool],
  prompt: `You are a coffee expert chatbot. A user is asking for coffee recommendations.

  User query: {{{query}}}

  {{#if (await shouldConsiderHistoryTool this)}}
  Based on their order history: {{{orderHistory}}} and loyalty points: {{{loyaltyPoints}}}, provide a personalized recommendation.
  {{else}}
  Provide a general coffee recommendation.
  {{/if}}
  `,
});

const coffeeChatbotRecommendationsFlow = ai.defineFlow(
  {
    name: 'coffeeChatbotRecommendationsFlow',
    inputSchema: CoffeeChatbotRecommendationsInputSchema,
    outputSchema: CoffeeChatbotRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
